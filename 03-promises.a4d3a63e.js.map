{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,IAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAEN,IAAIC,EAAaN,EAAKO,SAAgB,MAChCC,EAAYR,EAAKO,SAAe,KAChCE,EAAcT,EAAKO,SAAiB,OAEtCG,EAAQC,SAASL,EAAWM,OAC1BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GACvCE,EAAA5B,GAAS6B,OAAOC,QAAQ,kCAD1B,CAOA,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,GAAKN,EAAQM,IAAK,CAChC,IAAMC,EAAU/B,EAAc8B,EAAGV,GACjCS,EAASG,KAAKD,GACdX,GAASG,C,CAGXM,EAASI,SAAQ,SAACF,GAChBA,EACGG,MAAK,SAAAC,G,IAAGlC,EAAQkC,EAARlC,SAAUC,EAAKiC,EAALjC,MACjBwB,EAAA5B,GAAS6B,OAAOS,QAAQ,uBAAwCC,OAAfpC,EAAS,QAAYoC,OAANnC,EAAM,M,IAEvEoC,OAAM,SAAAH,G,IAAGlC,EAAQkC,EAARlC,SAAUC,EAAKiC,EAALjC,MAClBwB,EAAA5B,GAAS6B,OAAOC,QAAQ,sBAAqCS,OAAfpC,EAAS,QAAYoC,OAANnC,EAAM,M,OAIzEQ,EAAK6B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n\n  let delayInput = form.elements['delay'];\n  const stepInput = form.elements['step'];\n  const amountInput = form.elements['amount'];\n\n  let delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure('Please enter valid numbers');\n    return;\n  }\n\n  const promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    const promise = createPromise(i, delay);\n    promises.push(promise);\n    delay += step;\n  }\n\n  promises.forEach((promise) => {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  });\n\n  form.reset();\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","delayInput","elements","stepInput","amountInput","delay1","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","promises","i","promise","push","forEach","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.a4d3a63e.js.map"}